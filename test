import Jetson.GPIO as GPIO
from audio import speak, isSwitchValue  # Import isSwitchValue from audio.py

# GPIO library
red_pin = 38
green_pin = 40
button_pin = 33
button_gnd = 29

GPIO.setmode(GPIO.BOARD)
GPIO.setup(red_pin, GPIO.OUT, initial=GPIO.LOW)
GPIO.setup(green_pin, GPIO.OUT, initial=GPIO.LOW)
GPIO.setup(button_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(button_gnd, GPIO.OUT, initial=GPIO.HIGH)

def Red_outLed():
    # LED off
    try:
        GPIO.output(red_pin, GPIO.LOW)
    except KeyboardInterrupt:
        GPIO.cleanup()

def Green_outLed():
    # LED off
    try:
        GPIO.output(green_pin, GPIO.LOW)
    except KeyboardInterrupt:
        GPIO.cleanup()

def RedLed():
    try:
        Green_outLed()
        GPIO.output(red_pin, GPIO.HIGH)
    except KeyboardInterrupt:
        GPIO.cleanup()

def GreenLed():
    try:
        Red_outLed()
        GPIO.output(green_pin, GPIO.HIGH)
    except KeyboardInterrupt:
        GPIO.cleanup()

# Global variable
# isSwitchValue = 0  # Remove this line to avoid redefining the variable

def switch_handler(channel):
    global isSwitchValue  # Use the global variable from audio.py
    isSwitchValue = 1
    print('s', isSwitchValue)
    print('=====================switch======================')
    return False

def switch_event():
    GPIO.add_event_detect(button_pin, GPIO.FALLING, callback=switch_handler, bouncetime=200)
    print('e ', isSwitchValue)

# Call the speak() function or other relevant functions to trigger audio playback
# Be sure to handle isSwitchValue appropriately when using it in your GPIO-related functions.


이까지 하나========================================================


import pygame

def speak():
    pygame.init()
    pygame.mixer.music.load('/home/jetson/Desktop/LangChain-StoryBot-main/assist/wav/snow_white.wav')
    pygame.mixer.music.play()

    global isSwitchValue  # Make sure to handle global variables accordingly in your main script
    
    running = True
    while running:
        if isSwitchValue == 1:
            print(11111, isSwitchValue)
            pygame.mixer.music.stop()
            pygame.mixer.music.unload()
            pygame.quit()
            running = False
            isSwitchValue = 0
            return False

        # You can add additional conditions or logic here as needed

    return False
